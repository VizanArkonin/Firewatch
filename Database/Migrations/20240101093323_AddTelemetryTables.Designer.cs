// <auto-generated />
using System;
using Firewatch.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Firewatch.Database.Migrations
{
    [DbContext(typeof(FirewatchContext))]
    [Migration("20240101093323_AddTelemetryTables")]
    partial class AddTelemetryTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.14");

            modelBuilder.Entity("Firewatch.Database.Models.DailyTelemetry", b =>
                {
                    b.Property<int>("EntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MetricId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<float>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("EntryId");

                    b.ToTable("DailyTelemetry");
                });

            modelBuilder.Entity("Firewatch.Database.Models.HourlyTelemetry", b =>
                {
                    b.Property<int>("EntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MetricId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<float>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("EntryId");

                    b.ToTable("HourlyTelemetry");
                });

            modelBuilder.Entity("Firewatch.Database.Models.Metric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UnitOfMeasurement")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Metrics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Percentage of resource used",
                            Name = "Percent",
                            UnitOfMeasurement = "%"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Amount of Megabytes used by resource",
                            Name = "Megabytes Used",
                            UnitOfMeasurement = "mB"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Total amount of Megabytes available to resource",
                            Name = "Total Megabytes available",
                            UnitOfMeasurement = "mB"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Amount of bytes, sent by given resource",
                            Name = "Bytes sent",
                            UnitOfMeasurement = "b"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Amount of bytes, received by given resource",
                            Name = "Bytes received",
                            UnitOfMeasurement = "b"
                        },
                        new
                        {
                            Id = 6,
                            Description = "The speed of transmission for given resource",
                            Name = "Bytes sent per second",
                            UnitOfMeasurement = "b/sec"
                        },
                        new
                        {
                            Id = 7,
                            Description = "The speed of reception for given resource",
                            Name = "Bytes received per second",
                            UnitOfMeasurement = "b/sec"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Resource temperature",
                            Name = "Temperature",
                            UnitOfMeasurement = "°C"
                        });
                });

            modelBuilder.Entity("Firewatch.Database.Models.MonthlyTelemetry", b =>
                {
                    b.Property<int>("EntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MetricId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<float>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("EntryId");

                    b.ToTable("MonthlyTelemetry");
                });

            modelBuilder.Entity("Firewatch.Database.Models.TickTelemetry", b =>
                {
                    b.Property<int>("EntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MetricId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<float>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("EntryId");

                    b.ToTable("Telemetry");
                });
#pragma warning restore 612, 618
        }
    }
}
